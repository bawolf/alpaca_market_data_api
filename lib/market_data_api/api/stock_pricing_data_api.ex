# NOTE: This file is auto generated by OpenAPI Generator 7.6.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule MarketDataAPI.Api.StockPricingDataAPI do
  @moduledoc """
  API calls for all endpoints tagged `StockPricingDataAPI`.
  """

  alias MarketDataAPI.Connection
  import MarketDataAPI.RequestBuilder

  @doc """
  Get Bar data for multiple stock symbols
  The Multi Bars API returns aggregate historical data for multiple given ticker symbols over a specified time period.  Returned results are sorted by symbol first then by Bar timestamp. This means that you are likely to see only one symbol in your first response if there are enough Bars for that symbol to hit the limit you requested on that request.  In these situations if you keep requesting again with the next_page_token you will eventually reach the next symbols if any Bars were found for them.

  ### Parameters

  - `connection` (MarketDataAPI.Connection): Connection to server
  - `symbols` (String.t): The comma-separated list of stock ticker symbols to query for.
  - `timeframe` (String.t): Timeframe for the aggregation. Values are customizeable, frequently used examples: 1Min, 15Min, 1Hour, 1Day. Limits: 1Min-59Min, 1Hour-23Hour.
  - `opts` (keyword): Optional parameters
    - `:start` (DateTime.t): Filter data equal to or after this time in RFC-3339 format. Fractions of a second are not accepted.
    - `:end` (DateTime.t): Filter data equal to or before this time in RFC-3339 format. Fractions of a second are not accepted.
    - `:limit` (integer()): Number of data points to return. Must be in range 1-10000, defaults to 1000.
    - `:page_token` (String.t): Pagination token to continue from. The value to pass here is returned in specific requests when more data is available than the request limit allows.
    - `:adjustment` (String.t): specifies the corporate action adjustment(s) for bars data
    - `:feed` (String.t): Which feed to pull market data from. This is either `iex`, `otc`, or `sip`. `sip` and `otc` are only available to those with a subscription

  ### Returns

  - `{:ok, MarketDataAPI.Model.MultiBarsResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_bars_for_multiple_stock_symbols(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MarketDataAPI.Model.MultiBarsResponse.t} | {:error, Tesla.Env.t}
  def get_bars_for_multiple_stock_symbols(connection, symbols, timeframe, opts \\ []) do
    optional_params = %{
      :start => :query,
      :end => :query,
      :limit => :query,
      :page_token => :query,
      :adjustment => :query,
      :feed => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/v2/stocks/bars")
      |> add_param(:query, :symbols, symbols)
      |> add_param(:query, :timeframe, timeframe)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, MarketDataAPI.Model.MultiBarsResponse}
    ])
  end

  @doc """
  Bars
  The Bars API returns aggregate historical data for the requested security. Returns bars for the queried stock symbol.

  ### Parameters

  - `connection` (MarketDataAPI.Connection): Connection to server
  - `symbol` (String.t): The stock ticker symbol to query for.
  - `timeframe` (String.t): Timeframe for the aggregation. Values are customizeable, frequently used examples: 1Min, 15Min, 1Hour, 1Day. Limits: 1Min-59Min, 1Hour-23Hour.
  - `opts` (keyword): Optional parameters
    - `:start` (DateTime.t): Filter data equal to or after this time in RFC-3339 format. Fractions of a second are not accepted.
    - `:end` (DateTime.t): Filter data equal to or before this time in RFC-3339 format. Fractions of a second are not accepted.
    - `:limit` (integer()): Number of data points to return. Must be in range 1-10000, defaults to 1000.
    - `:page_token` (String.t): Pagination token to continue from. The value to pass here is returned in specific requests when more data is available than the request limit allows.
    - `:feed` (String.t): Which feed to pull market data from. This is either `iex`, `otc`, or `sip`. `sip` and `otc` are only available to those with a subscription
    - `:adjustment` (String.t): specifies the corporate action adjustment(s) for bars data

  ### Returns

  - `{:ok, MarketDataAPI.Model.BarsResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_bars_for_stock_symbol(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MarketDataAPI.Model.BarsResponse.t} | {:error, Tesla.Env.t}
  def get_bars_for_stock_symbol(connection, symbol, timeframe, opts \\ []) do
    optional_params = %{
      :start => :query,
      :end => :query,
      :limit => :query,
      :page_token => :query,
      :feed => :query,
      :adjustment => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/v2/stocks/#{symbol}/bars")
      |> add_param(:query, :timeframe, timeframe)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, MarketDataAPI.Model.BarsResponse}
    ])
  end

  @doc """
  Get list of Conditions
  Each feed/exchange uses its own set of codes to identify trade and quote conditions, so the same condition may have a different code depending on the originator of the data.  See [Our documentation](https://alpaca.markets/docs/market-data/#conditions) for more information

  ### Parameters

  - `connection` (MarketDataAPI.Connection): Connection to server
  - `type` (String.t): either \"trade\" or \"quote\"
  - `tape` (String.t): What kind of conditions to retrieve, \"A\" and \"B\" return CTS, where \"C\" will give you UTP 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, %{}}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_conditions(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, map()} | {:error, Tesla.Env.t}
  def get_conditions(connection, type, tape, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/v2/stocks/meta/conditions/#{type}")
      |> add_param(:query, :tape, tape)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %{}}
    ])
  end

  @doc """
  Get List of supported exchanges
  Returns a json object representing the exchanges we support. The keys are the short form codes you will see in our responses and the values are their respective full names.

  ### Parameters

  - `connection` (MarketDataAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, %{}}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_exchanges(Tesla.Env.client, keyword()) :: {:ok, map()} | {:error, Tesla.Env.t}
  def get_exchanges(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/v2/stocks/meta/exchanges")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %{}}
    ])
  end

  @doc """
  Get Latest Bars for Symbol
  The Bars API returns aggregate historical data for the requested security. Returns the latest bar data for the queried stock symbol.

  ### Parameters

  - `connection` (MarketDataAPI.Connection): Connection to server
  - `symbol` (String.t): The stock ticker symbol to query for.
  - `opts` (keyword): Optional parameters
    - `:feed` (String.t): Which feed to pull market data from. This is either `iex`, `otc`, or `sip`. `sip` and `otc` are only available to those with a subscription

  ### Returns

  - `{:ok, MarketDataAPI.Model.LatestBarResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_latest_bar_for_stock_symbol(Tesla.Env.client, String.t, keyword()) :: {:ok, MarketDataAPI.Model.LatestBarResponse.t} | {:error, Tesla.Env.t}
  def get_latest_bar_for_stock_symbol(connection, symbol, opts \\ []) do
    optional_params = %{
      :feed => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/v2/stocks/#{symbol}/bars/latest")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, MarketDataAPI.Model.LatestBarResponse}
    ])
  end

  @doc """
  Get Latest Bar data for multiple stock symbols
  The Bars API returns aggregate historical data for the requested security. Returns the latest bar data for the queried stock symbols.

  ### Parameters

  - `connection` (MarketDataAPI.Connection): Connection to server
  - `symbols` (String.t): The comma-separated list of stock ticker symbols to query for.
  - `opts` (keyword): Optional parameters
    - `:feed` (String.t): Which feed to pull market data from. This is either `iex`, `otc`, or `sip`. `sip` and `otc` are only available to those with a subscription

  ### Returns

  - `{:ok, MarketDataAPI.Model.LatestMultiBarsResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_latest_bars_for_multiple_stock_symbols(Tesla.Env.client, String.t, keyword()) :: {:ok, MarketDataAPI.Model.LatestMultiBarsResponse.t} | {:error, Tesla.Env.t}
  def get_latest_bars_for_multiple_stock_symbols(connection, symbols, opts \\ []) do
    optional_params = %{
      :feed => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/v2/stocks/bars/latest")
      |> add_param(:query, :symbols, symbols)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, MarketDataAPI.Model.LatestMultiBarsResponse}
    ])
  end

  @doc """
  Get Latest Quote for stock symbol
  The Latest Quote API provides the latest quote data for a given ticker symbol.

  ### Parameters

  - `connection` (MarketDataAPI.Connection): Connection to server
  - `symbol` (String.t): The stock ticker symbol to query for.
  - `opts` (keyword): Optional parameters
    - `:feed` (String.t): Which feed to pull market data from. This is either `iex`, `otc`, or `sip`. `sip` and `otc` are only available to those with a subscription

  ### Returns

  - `{:ok, MarketDataAPI.Model.LatestQuoteResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_latest_quote_for_stock_symbol(Tesla.Env.client, String.t, keyword()) :: {:ok, MarketDataAPI.Model.LatestQuoteResponse.t} | {:error, Tesla.Env.t}
  def get_latest_quote_for_stock_symbol(connection, symbol, opts \\ []) do
    optional_params = %{
      :feed => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/v2/stocks/#{symbol}/quotes/latest")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, MarketDataAPI.Model.LatestQuoteResponse}
    ])
  end

  @doc """
  Get Latest Quotes for multiple stock symbols
  Returns the latest quotes data for the queried stock symbols.

  ### Parameters

  - `connection` (MarketDataAPI.Connection): Connection to server
  - `symbols` (String.t): The comma-separated list of stock ticker symbols to query for.
  - `opts` (keyword): Optional parameters
    - `:feed` (String.t): Which feed to pull market data from. This is either `iex`, `otc`, or `sip`. `sip` and `otc` are only available to those with a subscription

  ### Returns

  - `{:ok, MarketDataAPI.Model.LatestMultiQuotesResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_latest_quotes_for_multiple_stock_symbols(Tesla.Env.client, String.t, keyword()) :: {:ok, MarketDataAPI.Model.LatestMultiQuotesResponse.t} | {:error, Tesla.Env.t}
  def get_latest_quotes_for_multiple_stock_symbols(connection, symbols, opts \\ []) do
    optional_params = %{
      :feed => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/v2/stocks/quotes/latest")
      |> add_param(:query, :symbols, symbols)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, MarketDataAPI.Model.LatestMultiQuotesResponse}
    ])
  end

  @doc """
  Latest Trade
  The Latest Trade API provides the latest trade data for a given ticker symbol.

  ### Parameters

  - `connection` (MarketDataAPI.Connection): Connection to server
  - `symbol` (String.t): The stock ticker symbol to query for.
  - `opts` (keyword): Optional parameters
    - `:feed` (String.t): Which feed to pull market data from. This is either `iex`, `otc`, or `sip`. `sip` and `otc` are only available to those with a subscription

  ### Returns

  - `{:ok, MarketDataAPI.Model.LatestTradeResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_latest_trade_for_stock_symbol(Tesla.Env.client, String.t, keyword()) :: {:ok, MarketDataAPI.Model.LatestTradeResponse.t} | {:error, Tesla.Env.t}
  def get_latest_trade_for_stock_symbol(connection, symbol, opts \\ []) do
    optional_params = %{
      :feed => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/v2/stocks/#{symbol}/trades/latest")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, MarketDataAPI.Model.LatestTradeResponse}
    ])
  end

  @doc """
  Get Latest Trades data for multiple stock symbols
  Returns the latest trades data for the queried stock symbols.

  ### Parameters

  - `connection` (MarketDataAPI.Connection): Connection to server
  - `symbols` (String.t): The comma-separated list of stock ticker symbols to query for.
  - `opts` (keyword): Optional parameters
    - `:feed` (String.t): Which feed to pull market data from. This is either `iex`, `otc`, or `sip`. `sip` and `otc` are only available to those with a subscription

  ### Returns

  - `{:ok, MarketDataAPI.Model.LatestMultiTradesResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_latest_trades_for_multiple_stock_symbols(Tesla.Env.client, String.t, keyword()) :: {:ok, MarketDataAPI.Model.LatestMultiTradesResponse.t} | {:error, Tesla.Env.t}
  def get_latest_trades_for_multiple_stock_symbols(connection, symbols, opts \\ []) do
    optional_params = %{
      :feed => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/v2/stocks/trades/latest")
      |> add_param(:query, :symbols, symbols)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, MarketDataAPI.Model.LatestMultiTradesResponse}
    ])
  end

  @doc """
  Get Quotes for multiple stock symbols
  The Multi Quotes API provides NBBO quotes for multiple given ticker symbols over a specified time period.  Returned results are sorted by symbol first then by Quote timestamp. This means that you are likely to see only one symbol in your first response if there are enough Quotes for that symbol to hit the limit you requested on that request.  In these situations if you keep requesting again with the next_page_token you will eventually reach the next symbols if any Quotes were found for them.

  ### Parameters

  - `connection` (MarketDataAPI.Connection): Connection to server
  - `symbols` (String.t): The comma-separated list of stock ticker symbols to query for.
  - `opts` (keyword): Optional parameters
    - `:start` (DateTime.t): Filter data equal to or after this time in RFC-3339 format. Fractions of a second are not accepted.
    - `:end` (DateTime.t): Filter data equal to or before this time in RFC-3339 format. Fractions of a second are not accepted.
    - `:limit` (integer()): Number of data points to return. Must be in range 1-10000, defaults to 1000.
    - `:page_token` (String.t): Pagination token to continue from. The value to pass here is returned in specific requests when more data is available than the request limit allows.
    - `:feed` (String.t): Which feed to pull market data from. This is either `iex`, `otc`, or `sip`. `sip` and `otc` are only available to those with a subscription

  ### Returns

  - `{:ok, MarketDataAPI.Model.MultiQuotesReponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_quotes_for_multiple_stock_symbols(Tesla.Env.client, String.t, keyword()) :: {:ok, MarketDataAPI.Model.MultiQuotesReponse.t} | {:error, Tesla.Env.t}
  def get_quotes_for_multiple_stock_symbols(connection, symbols, opts \\ []) do
    optional_params = %{
      :start => :query,
      :end => :query,
      :limit => :query,
      :page_token => :query,
      :feed => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/v2/stocks/quotes")
      |> add_param(:query, :symbols, symbols)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, MarketDataAPI.Model.MultiQuotesReponse}
    ])
  end

  @doc """
  Get Quotes for stock symbol
  The Quotes API provides NBBO quotes for a single given ticker symbol at a specified date. Returns quotes (NBBOs) for the querried stock symbol.

  ### Parameters

  - `connection` (MarketDataAPI.Connection): Connection to server
  - `symbol` (String.t): The stock ticker symbol to query for.
  - `opts` (keyword): Optional parameters
    - `:start` (DateTime.t): Filter data equal to or after this time in RFC-3339 format. Fractions of a second are not accepted.
    - `:end` (DateTime.t): Filter data equal to or before this time in RFC-3339 format. Fractions of a second are not accepted.
    - `:limit` (integer()): Number of data points to return. Must be in range 1-10000, defaults to 1000.
    - `:page_token` (String.t): Pagination token to continue from. The value to pass here is returned in specific requests when more data is available than the request limit allows.
    - `:feed` (String.t): Which feed to pull market data from. This is either `iex`, `otc`, or `sip`. `sip` and `otc` are only available to those with a subscription

  ### Returns

  - `{:ok, MarketDataAPI.Model.QuotesResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_quotes_for_stock_symbol(Tesla.Env.client, String.t, keyword()) :: {:ok, MarketDataAPI.Model.QuotesResponse.t} | {:error, Tesla.Env.t}
  def get_quotes_for_stock_symbol(connection, symbol, opts \\ []) do
    optional_params = %{
      :start => :query,
      :end => :query,
      :limit => :query,
      :page_token => :query,
      :feed => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/v2/stocks/#{symbol}/quotes")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, MarketDataAPI.Model.QuotesResponse}
    ])
  end

  @doc """
  Get a Snapshot for a stock symbol
  The Snapshot API for one ticker provides the latest trade, latest quote, minute bar daily bar and previous daily bar data for a given ticker symbol. This endpoint returns the snapshot for the requested security.

  ### Parameters

  - `connection` (MarketDataAPI.Connection): Connection to server
  - `symbol` (String.t): The stock ticker symbol to query for.
  - `opts` (keyword): Optional parameters
    - `:feed` (String.t): Which feed to pull market data from. This is either `iex`, `otc`, or `sip`. `sip` and `otc` are only available to those with a subscription

  ### Returns

  - `{:ok, MarketDataAPI.Model.Snapshot.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_snapshot_for_stock_symbol(Tesla.Env.client, String.t, keyword()) :: {:ok, MarketDataAPI.Model.Snapshot.t} | {:error, Tesla.Env.t}
  def get_snapshot_for_stock_symbol(connection, symbol, opts \\ []) do
    optional_params = %{
      :feed => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/v2/stocks/#{symbol}/snapshot")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, MarketDataAPI.Model.Snapshot}
    ])
  end

  @doc """
  Get Snapshots for multiple stock symbols
  The Snapshot API for multiple tickers provides the latest trade, latest quote, minute bar daily bar and previous daily bar data for the given ticker symbols.

  ### Parameters

  - `connection` (MarketDataAPI.Connection): Connection to server
  - `symbols` (String.t): The comma-separated list of stock ticker symbols to query for.
  - `opts` (keyword): Optional parameters
    - `:feed` (String.t): Which feed to pull market data from. This is either `iex`, `otc`, or `sip`. `sip` and `otc` are only available to those with a subscription

  ### Returns

  - `{:ok, %{}}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_snapshots_for_multiple_stock_symbols(Tesla.Env.client, String.t, keyword()) :: {:ok, map()} | {:error, Tesla.Env.t}
  def get_snapshots_for_multiple_stock_symbols(connection, symbols, opts \\ []) do
    optional_params = %{
      :feed => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/v2/stocks/snapshots")
      |> add_param(:query, :symbols, symbols)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %{}}
    ])
  end

  @doc """
  Get Trade data for multiple stock symbols
  The Multi Trades API provides historical trade data for multiple given ticker symbols over a specified time period.  Returned results are sorted by symbol first then by Trade timestamp. This means that you are likely to see only one symbol in your first response if there are enough Trades for that symbol to hit the limit you requested on that request.  In these situations if you keep requesting again with the next_page_token you will eventually reach the next symbols if any Trades were found for them.

  ### Parameters

  - `connection` (MarketDataAPI.Connection): Connection to server
  - `symbols` (String.t): The comma-separated list of stock ticker symbols to query for.
  - `opts` (keyword): Optional parameters
    - `:start` (DateTime.t): Filter data equal to or after this time in RFC-3339 format. Fractions of a second are not accepted.
    - `:end` (DateTime.t): Filter data equal to or before this time in RFC-3339 format. Fractions of a second are not accepted.
    - `:limit` (integer()): Number of data points to return. Must be in range 1-10000, defaults to 1000.
    - `:page_token` (String.t): Pagination token to continue from. The value to pass here is returned in specific requests when more data is available than the request limit allows.
    - `:feed` (String.t): Which feed to pull market data from. This is either `iex`, `otc`, or `sip`. `sip` and `otc` are only available to those with a subscription

  ### Returns

  - `{:ok, MarketDataAPI.Model.MultiTradesResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_trades_for_multiple_stock_symbols(Tesla.Env.client, String.t, keyword()) :: {:ok, MarketDataAPI.Model.MultiTradesResponse.t} | {:error, Tesla.Env.t}
  def get_trades_for_multiple_stock_symbols(connection, symbols, opts \\ []) do
    optional_params = %{
      :start => :query,
      :end => :query,
      :limit => :query,
      :page_token => :query,
      :feed => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/v2/stocks/trades")
      |> add_param(:query, :symbols, symbols)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, MarketDataAPI.Model.MultiTradesResponse}
    ])
  end

  @doc """
  Trades
  The Trades API provides historical trade data for a given ticker symbol on a specified date. Returns trades for the queried stock signal.

  ### Parameters

  - `connection` (MarketDataAPI.Connection): Connection to server
  - `symbol` (String.t): The stock ticker symbol to query for.
  - `opts` (keyword): Optional parameters
    - `:start` (DateTime.t): Filter data equal to or after this time in RFC-3339 format. Fractions of a second are not accepted.
    - `:end` (DateTime.t): Filter data equal to or before this time in RFC-3339 format. Fractions of a second are not accepted.
    - `:limit` (integer()): Number of data points to return. Must be in range 1-10000, defaults to 1000.
    - `:page_token` (String.t): Pagination token to continue from. The value to pass here is returned in specific requests when more data is available than the request limit allows.
    - `:feed` (String.t): Which feed to pull market data from. This is either `iex`, `otc`, or `sip`. `sip` and `otc` are only available to those with a subscription

  ### Returns

  - `{:ok, MarketDataAPI.Model.TradesResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_trades_for_stock_symbol(Tesla.Env.client, String.t, keyword()) :: {:ok, MarketDataAPI.Model.TradesResponse.t} | {:error, Tesla.Env.t}
  def get_trades_for_stock_symbol(connection, symbol, opts \\ []) do
    optional_params = %{
      :start => :query,
      :end => :query,
      :limit => :query,
      :page_token => :query,
      :feed => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/v2/stocks/#{symbol}/trades")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, MarketDataAPI.Model.TradesResponse}
    ])
  end
end
