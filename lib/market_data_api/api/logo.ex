# NOTE: This file is auto generated by OpenAPI Generator 7.6.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule MarketDataAPI.Api.Logo do
  @moduledoc """
  API calls for all endpoints tagged `Logo`.
  """

  alias MarketDataAPI.Connection
  import MarketDataAPI.RequestBuilder

  @doc """
  Get Logo for symbol
  Returns logo image resource for provided symbol.

  ### Parameters

  - `connection` (MarketDataAPI.Connection): Connection to server
  - `crypto_or_stock_symbol` (String.t): The crypto or stock symbol to query for. Note, currently all crypto symbols must be appended with \"USD\", ie \"BTCUSD\" would be how you query for BTC.
  - `opts` (keyword): Optional parameters
    - `:placeholder` (boolean()): If true then the api will generate a placeholder image if no logo was found. Defaults to true

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_logo_for_symbol(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, String.t} | {:error, Tesla.Env.t}
  def get_logo_for_symbol(connection, crypto_or_stock_symbol, opts \\ []) do
    optional_params = %{
      :placeholder => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/v1beta1/logos/#{crypto_or_stock_symbol}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {404, false}
    ])
  end
end
